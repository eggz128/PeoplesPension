// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using static com.edgewords.webdrivertest.Utils.HelperLib; //Static import static methods from Utils.HelperLib
using System.Text.RegularExpressions;

namespace com.edgewords.webdrivertest.Test_Cases
{
    [TestFixture]
    public class SelIDEDemoTest : Utils.TestBase //This class inherits from Utils/TestBase.cs
    {
       /*
        * [SetUp] and [TearDown] methods and Fields have been moved in to Utils/TestBase.cs
        * This test class now inherits these (see line 21)
        */

        [Test, Category("Functional")]
        public void selIDEDemo()
        {

            /*
             * When exporting from SelIDE we chose to add comments.
             * Before each line of webdriver code, in comments you 
             * will see the equivalent step as it was in SelIDE
             */

            // Test name: SelIDEDemo
            // Step # | name | target | value
            // 1 | open | /webdriver2/ | 
            driver.Navigate().GoToUrl("https://www.edgewordstraining.co.uk/webdriver2/"); //You could also do this with driver.Url = "https://www.edgewordstraining.co.uk/webdriver2/";
            // 2 | setWindowSize | 1187x1003 | 
            driver.Manage().Window.Size = new System.Drawing.Size(1187, 1003); //Resizes the Chrome window during the test.
                                                                               //driver.Manage().Window.Maximize(); //Shortcut to maximize the window. Cross browser friendly too - also works for IE, Firefox etc, and doesnt rely on command line switched like yesterdays example

            // 3 | click | css=li:nth-child(1) span | 
            driver.FindElement(By.LinkText("Login To Restricted Area")).Click(); //Changed the locator for something easier to read/maintain 



            //Here we navigate to a new page, so it's possible that webdriver might run the next action too early (before username is available)
            //In which case the most likely error is NoSuchElement - we may need to wait

            waitforelement(driver, 3, By.Id("username")); //Removed Thread.Sleep(10000) and instead use helper method defined in Utils/HelperLib.cs

            // 4 | click | id=username | 
            driver.FindElement(By.Id("username")).Click();
            // 5 | assertText | css=h1 | Access and Authentication

            /* Basic reporting - capture a value and write it out using the console */
            string heading = driver.FindElement(By.XPath("//*[@id='right-column']/h1")).Text; //Captures the text <h1>HERE</h1>
            Console.WriteLine("The heading is: " + heading);

            /* takescreenshot of menu using the static method defined in Utils/HelperLib.cs */
            takescreenshotofelement(driver, By.Id("menu"), "menu");


            // 6 | type | id=username | edgewords
            driver.FindElement(By.Id("username")).SendKeys("edgewords");

            //Check username was typed in
            string typedusername = driver.FindElement(By.Id("username")).GetAttribute("value"); //Input elements (i.e. text boxes) don't have a closing tag, so no .Text to capture. Capture the value attr instead.
            Console.WriteLine("The typed username was: " + typedusername);

            // 7 | click | id=password | 
            driver.FindElement(By.Id("password")).Click();
            // 8 | type | id=password | edgewords123
            driver.FindElement(By.Id("password")).SendKeys("edgewords123");
            // 9 | click | linkText=Submit | 
            driver.FindElement(By.LinkText("Submit")).Click();

            /* Double login needed to happen because we went to the non www. version of the site */
            //// 10 | click | id=username | 
            //driver.FindElement(By.Id("username")).Click();
            //// 11 | type | id=username | edgewords
            //driver.FindElement(By.Id("username")).SendKeys("edgewords");
            //// 12 | click | id=password | 
            //driver.FindElement(By.Id("password")).Click();
            //// 13 | type | id=password | edgewords123
            //driver.FindElement(By.Id("password")).SendKeys("edgewords123");
            //// 14 | click | linkText=Submit | 
            //driver.FindElement(By.LinkText("Submit")).Click();

            /* Navigating to a new page after clicking submit above */

            //Test that we are logged in
            Thread.Sleep(2000); //Hack to prevent capturing the text on the log in page - we want to give the site a chance to load the Add Record page first
            string bodytext = driver.FindElement(By.TagName("body")).Text;
            Console.WriteLine("The captured text is: " + bodytext);

            /* NUnit constraint model assertion to check the captured text does show we are logged in */
            Assert.That(bodytext, Does.Contain("User is logged in").IgnoreCase, "We wern't logged in");
            /* NUnit classic model (like MSTest asserts) that uses a Regualr Expression to check for a partial match on the complete bodytext captured */
            /* Try comparing the error messages when the assertion fails - the default "classic" error messages are not as descriptive or useful as the constraint asserts */
            Assert.True(new Regex(@"User is Logged in").IsMatch(bodytext), "Didn't match regex");





            //16 | click | css =.last span | //This locator matches Registration link on previous page and Log Out on next page.
            //using it might result in StaleElementExceptions when WD incorrectly finds the Registration link before it is unloaded when the new page loads in
            //
            /* 
             * Dont want to use a Thread.Sleep as we dont want to be locked in to a long wait
             * so instead we can use an explicit conditional wait
             */
            //WebDriverWait mywait = new WebDriverWait(driver, TimeSpan.FromSeconds(12));
            //mywait.Until(anything => anything.FindElement(By.LinkText("Log Out")));

            /*Replace above with a call to HelperLib */
            waitforelement(driver, 12, By.LinkText("Log Out"));

            /*If we cant click on "Log Out", catch the error (dont end the test) and take a screenshot using HelperLib */
            try
            {
                driver.FindElement(By.LinkText("Log Out")).Click();
            }
            catch (NoSuchElementException)
            {
                takescreenshot(driver, "error"); //Take screenshot using HelperLib
                TestContext.AddTestAttachment(@"c:\pictures\error.png", "THis is the error screenshot"); //Attach screenshot to report
            } 

            

            /* Clicking "Log Out" will spawn a JS prompt which we can handle with: */
            driver.SwitchTo().Alert().Accept(); //Click OK on JS alert. Alerts *must* be explicitly handled if they occur, or WD will error out with UnhandledAlertException

            /*Finally, lets wait to land back on the login page */
            /*We could reuse the mywait object from earlier, but maybe we want a new one with a longer timeout*/
            //WebDriverWait mysecondwait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
            //mysecondwait.Until(drv => drv.FindElement(By.LinkText("Register"))); //The register link isnt on the Add Record "logged in" page, but is on the "login" page, so we can wait for that
            /* Again, above changed for a quick call to a helper method */
            waitforelement(driver, 20, By.LinkText("Register"));

            Console.WriteLine("Done!");
            //Assert.Pass("We're done here"); //If this is uncommented no final screenshot is taken as Assert.Pass stops the test here.
            takescreenshot(driver, "finished");
        }
    }
}